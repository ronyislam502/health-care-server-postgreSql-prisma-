generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum BloodGroup {
  A_POSITIVE  @map("A+")
  B_POSITIVE  @map("B+")
  O_POSITIVE  @map("O+")
  AB_POSITIVE @map("AB+")
  A_NEGATIVE  @map("A-")
  B_NEGATIVE  @map("B-")
  O_NEGATIVE  @map("O-")
  AB_NEGATIVE @map("AB-")
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

model User {
  id                 String     @id @default(uuid())
  name               String?
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  passwordChangedAt  DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  avatar    String?
  phone     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  avatar              String?
  phone               String
  address             String?
  registrationNumber  String
  experience          Int      @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updateAt            DateTime @updatedAt
  user                User     @relation(fields: [email], references: [email])

  @@map("doctors")
}

model Patient {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  name      String
  address   String?
  avatar    String?
  phone     String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [email], references: [email])

  @@map("patients")
}

